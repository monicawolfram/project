<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Manage Users</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <style>
    body {
      background-color: #f5f5f5;
      padding: 20px;
    }
    .card-header {
      background-color: #0d6efd;
      color: #fff;
    }
    .user-photo {
      width: 60px;
      height: 60px;
      border-radius: 50%;
      object-fit: cover;
    }
    .btn-sm {
      margin: 2px;
    }
  </style>
</head>
<body>
<div class="container">
  <h2 class="mb-4">Manage Users</h2>

  <!-- Add User Button -->
  <div class="mb-3">
    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addUserModal">Add New User</button>
    <button class="btn btn-danger" id="openDeleteUsersModalBtn">Delete All Users</button>
    <button type="button" class="btn btn-success" onclick="openApproveUsersModal()">Approve All Pending Users</button>
    <button class="btn btn-warning" onclick="openUpdateUsersModal()">Update All Users</button>
    <button class="btn btn-info text-white" onclick="viewAllUsers()">View All Users</button>
   
  </div>

  <!-- Users Table -->
  <div class="card">
    <div class="card-header">All Users</div>
    <div class="card-body">
      <table class="table table-bordered table-hover">
        <thead class="table-light">
          <tr>
            <th>Photo</th>
            <th>Name</th>
            <th>Reg_no</th>
            <th>Department</th>
            <th>Program</th>
            <th>college</th>
            <th>year</th>
            <th>Role</th>
            <th>Gender</th>
            <th>Phone_no</th>
            <th>Actions</th>
          </tr>
        </thead>

<tbody id="userTableBody">
  <% users.forEach(user => { %>
    <tr>
      <td>
        <% if (user.photo) { %>
          <img src="/uploads/<%= user.photo %>" width="50" height="50" />
        <% } else { %>
          <span>No photo</span>
        <% } %>
      </td>
      <td><%= user.name %></td>
      <td><%= user.reg_no %></td>
      <td><%= user.department %></td>
      <td><%= user.program %></td>
      <td><%= user.college %></td>
      <td><%= user.year %></td>
      <td><%= user.role %></td>
      <td><%= user.gender %></td>
      <td><%= user.phone_no %></td>
      <td>
        <button class="btn btn-sm btn-info " onclick="viewUser('<%= user.id %>')">View</button>
        <button class="btn btn-sm btn-warning " onclick="openEditModal('<%= user.id %>')">Edit</button>
        <button class="btn btn-sm btn-danger " onclick="deleteUser('<%= user.id %>')">Delete</button>
        <% if (user.is_approved === 'no' || !user.is_approved) { %>
    <button class="btn btn-sm btn-success " onclick="approveUser('<%= user.id %>')">Approve</button>
  <% } else { %>
    <span class="badge bg-success">Approved</span>
  <% } %>
      </td>
    </tr>
  <% }); %>
</tbody>


      </table>
    </div>
  </div>
</div>

<!-- Add User Modal -->
<div class="modal fade" id="addUserModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
     <form id="addUserForm">
  <div class="modal-header">
    <h5 class="modal-title">Add New User</h5>
    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
  </div>
  <div class="modal-body">
    <input type="text" class="form-control mb-2" placeholder="Name" id="addName" name="name" required />
    <input type="text" class="form-control mb-2" placeholder="Reg_no" id="addReg_no" name="reg_no" required />
    <input type="text" class="form-control mb-2" placeholder="Department" id="addDepartment" name="department" required />
    <input type="text" class="form-control mb-2" placeholder="Program" id="addProgram" name="program" required />
    <input type="text" class="form-control mb-2" placeholder="College" id="addCollege" name="college" required />
    <input type="text" class="form-control mb-2" placeholder="Year" id="addYear" name="year" required />
    <select class="form-control mb-2" id="addRole" name="role" required>
  <option value=""> Role</option>
  <option value="STUDENT">STUDENT</option>
  <option value="ADMIN">ADMIN</option>
  <option value="LIBRARIAN">LIBRARIAN</option>
  <option value="STAFF">STAFF</option>
  <option value="USER">USER</option>
</select>

    <input type="text" class="form-control mb-2" placeholder="Gender" id="addGender" name="gender" required />
    <input type="text" class="form-control mb-2" placeholder="Phone_no" id="addPhone_no" name="phone_no" required />
    <input type="file" class="form-control" id="addPhoto" name="photo" />
  </div>
  <div class="modal-footer">
    <button type="submit" class="btn btn-success">Add User</button>
    
  </div>
</form>

    </div>
  </div>
</div>

<!-- Edit User Modal -->
<div class="modal fade" id="editUserModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <form id="editUserForm">
        <div class="modal-header">
          <h5 class="modal-title">Edit User</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <input type="hidden" id="editIndex" />
          <input type="text" class="form-control mb-2" placeholder="Name" id="editName" required />
          <input type="text" class="form-control mb-2" placeholder="Reg_no" id="editReg_no" required />
          <input type="text" class="form-control mb-2" placeholder="Department" id="editDepartment" required />
          <input type="text" class="form-control mb-2" placeholder="Program" id="editProgram" required />
          <input type="text" class="form-control mb-2" placeholder="College" id="editCollege" required />
          <input type="text" class="form-control mb-2" placeholder="Year" id="editYear" required />
          <select class="form-control mb-2" id="editRole" required>
            <option value="">Role</option>
            <option value="STUDENT">STUDENT</option>
            <option value="ADMIN">ADMIN</option>
            <option value="LIBRARIAN">LIBRARIAN</option>
            <option value="STAFF">STAFF</option>
            <option value="USER">USER</option>
            </select>

          <input type="text" class="form-control mb-2" placeholder="Gender" id="editGender" required />
          <input type="text" class="form-control mb-2" placeholder="Phone_no" id="editPhone_no" required />
          <input type="file" class="form-control" id="editPhoto" />
        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-success">Update User</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- View User Modal -->
<div class="modal fade" id="viewUserModal" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">User Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body text-center">
        <img id="viewPhoto" class="user-photo mb-3" />
        <h5 id="viewName"></h5>
        <p id="viewReg_no"></p>
        <p id="viewDepartment"></p>
        <p id="viewProgram"></p>
        <p id="viewCollege"></p>
        <p id="viewYear"></p>
        <p id="viewGender"></p>
        <p id="viewPhone_no"></p>
        <p><strong>Role:</strong> <span id="viewRole"></span></p>

      </div>
    </div>
  </div>
</div>

<!-- Delete Users Modal -->
<div class="modal fade" id="deleteUsersModal" tabindex="-1" aria-labelledby="deleteUsersModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header bg-danger text-white">
        <h5 class="modal-title" id="deleteUsersModalLabel">Delete Users</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>

      <div class="modal-body">
        <!-- Filter Input -->
        <div class="row mb-3">
          <div class="col-md-6">
            <input type="text" id="deleteFilterCourse" class="form-control" placeholder="Filter by Reg. No / Year / Department" oninput="applyDeleteFilters()">
          </div>
          <div class="col-md-6 text-end">
            <button class="btn btn-outline-danger" onclick="deleteAllFilteredUsers()">Delete Filtered Users</button>
          </div>
        </div>

        <!-- Users Table -->
        <div class="table-responsive">
          <table class="table table-bordered table-hover">
            <thead class="table-light">
              <tr>
                <th><input type="checkbox" id="selectAllDelete"></th>
                <th>Name</th>
                <th>Reg. No</th>
                <th>Department</th>
                <th>Year</th>
              </tr>
            </thead>
            <tbody id="deleteUsersTableBody">
              <!-- Users will be injected here -->
            </tbody>
          </table>
        </div>
      </div>

      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button class="btn btn-danger" onclick="deleteAllFilteredUsers()">Delete Selected</button>
      </div>
    </div>
  </div>
</div>

<script>
  // Load users into the modal when opened
document.getElementById('openDeleteUsersModalBtn').addEventListener('click', async () => {
  try {
    console.log('Fetching users...');
    const res = await fetch('/admin/view-users');
    if (!res.ok) {
      const text = await res.text();
      throw new Error(`Failed to fetch users: ${res.status} ${res.statusText} - ${text}`);
    }
    const users = await res.json();
    console.log('Users fetched:', users);

    const tbody = document.getElementById('deleteUsersTableBody');
    tbody.innerHTML = '';

    users.forEach(user => {
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td><input type="checkbox" class="deleteUserCheckbox" data-id="${user.id}"></td>
        <td>${user.name}</td>
        <td>${user.reg_no}</td>
        <td>${user.department}</td>
        <td>${user.year}</td>
      `;
      tbody.appendChild(tr);
    });

    const deleteUsersModal = new bootstrap.Modal(document.getElementById('deleteUsersModal'));
    deleteUsersModal.show();

    document.getElementById('selectAllDelete').checked = false;
  } catch (err) {
    alert('Failed to load users for deletion. See console for details.');
    console.error('Error loading users:', err);
  }
});

// Select/Deselect all checkboxes
document.getElementById('selectAllDelete').addEventListener('change', function () {
  const checked = this.checked;
  document.querySelectorAll('.deleteUserCheckbox').forEach(chk => {
    if (chk.closest('tr').style.display !== 'none') {
      chk.checked = checked;
    }
  });
});

// Filter rows based on input (reg_no/year/department)
function applyDeleteFilters() {
  const filterText = document.getElementById('deleteFilterCourse').value.toLowerCase();

  const rows = document.querySelectorAll('#deleteUsersTableBody tr');
  rows.forEach(row => {
    const regNo = row.children[2].textContent.toLowerCase();
    const year = row.children[4].textContent.toLowerCase();
    const dept = row.children[3].textContent.toLowerCase();

    const match = !filterText || regNo.includes(filterText) || year.includes(filterText) || dept.includes(filterText);
    row.style.display = match ? '' : 'none';
  });

  document.getElementById('selectAllDelete').checked = false;
}

// Delete all filtered (visible) users
async function deleteAllFilteredUsers() {
  try {
    const visibleRows = Array.from(document.querySelectorAll('#deleteUsersTableBody tr'))
      .filter(row => row.style.display !== 'none');

    if (visibleRows.length === 0) {
      alert('No users match the filter criteria to delete.');
      return;
    }

    if (!confirm(`Are you sure you want to delete ALL (${visibleRows.length}) selected users? This action cannot be undone.`)) {
      return;
    }

    const idsToDelete = visibleRows.map(row => {
      const checkbox = row.querySelector('.deleteUserCheckbox');
      return checkbox.getAttribute('data-id');
    });

    console.log('Deleting user IDs:', idsToDelete);

    const res = await fetch('/admin/delete-users-bulk', {
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ ids: idsToDelete })
    });

    if (!res.ok) {
      const text = await res.text();
      throw new Error(`Delete request failed: ${res.status} ${res.statusText} - ${text}`);
    }

    const data = await res.json();
    alert(data.message || 'Select users deleted.');

    bootstrap.Modal.getInstance(document.getElementById('deleteUsersModal')).hide();
    location.reload();
  } catch (err) {
    alert('Failed to delete users. See console for details.');
    console.error('Error deleting users:', err);
  }
}

</script>



<!-- Modal for Approving Pending Users -->
<div class="modal fade" id="approveUsersModal" tabindex="-1" aria-labelledby="approveUsersModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header bg-success text-white">
        <h5 class="modal-title" id="approveUsersModalLabel">Pending Users</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>

      <div class="modal-body">
        <input type="text" id="filterPendingUsers" class="form-control mb-3" placeholder="Filter by Name / Reg No / Department" oninput="filterPendingUsers()">

        <div class="table-responsive">
          <table class="table table-bordered table-striped">
            <thead class="table-light">
              <tr>
                <th>Name</th>
                <th>Reg. No</th>
                <th>Department</th>
                <th>Year</th>
                <th>Status</th>
              </tr>
            </thead>
            <tbody id="pendingUsersTableBody">
              <!-- Filled dynamically -->
            </tbody>
          </table>
        </div>
      </div>

      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button class="btn btn-success" onclick="approveAllUsers()">Approve All</button>
      </div>
    </div>
  </div>
</div>

<script>
  async function openApproveUsersModal() {
    try {
      const res = await fetch('/admin/view-users');
      if (!res.ok) throw new Error('Failed to fetch users');

      const users = await res.json();
      const tbody = document.getElementById('pendingUsersTableBody');
      tbody.innerHTML = '';

      const pendingUsers = users.filter(user => user.is_approved === 'no');

      if (pendingUsers.length === 0) {
        tbody.innerHTML = `<tr><td colspan="5" class="text-center">No pending users found</td></tr>`;
      } else {
        pendingUsers.forEach(user => {
          const tr = document.createElement('tr');
          tr.innerHTML = `
            <td>${user.name}</td>
            <td>${user.reg_no}</td>
            <td>${user.department}</td>
            <td>${user.year}</td>
            <td><span class="badge bg-warning text-dark">Pending</span></td>
          `;
          tbody.appendChild(tr);
        });
      }

      const modal = new bootstrap.Modal(document.getElementById('approveUsersModal'));
      modal.show();
    } catch (err) {
      console.error(err);
      alert('Failed to load pending users. See console.');
    }
  }

  function filterPendingUsers() {
    const filter = document.getElementById('filterPendingUsers').value.toLowerCase();
    const rows = document.querySelectorAll('#pendingUsersTableBody tr');
    rows.forEach(row => {
      const text = row.textContent.toLowerCase();
      row.style.display = text.includes(filter) ? '' : 'none';
    });
  }

  async function approveAllUsers() {
    if (!confirm("Are you sure you want to approve all pending users?")) return;

    try {
      const res = await fetch('/admin/approve-users-bulk', {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' }
      });

      if (!res.ok) {
        const text = await res.text();
        throw new Error(`Approval failed: ${res.status} ${res.statusText} - ${text}`);
      }

      const data = await res.json();
      alert(data.message || 'All pending users approved successfully!');
      bootstrap.Modal.getInstance(document.getElementById('approveUsersModal')).hide();
      location.reload();
    } catch (err) {
      alert('Failed to approve users. Check the console.');
      console.error('Error:', err);
    }
  }
</script>

<!-- Modal -->
<div class="modal fade" id="updateUsersModal" tabindex="-1" aria-labelledby="updateUsersModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-dialog-scrollable">
    <form id="updateAllUsersForm" onsubmit="submitUserUpdates(event)">
      <div class="modal-content">
        <div class="modal-header bg-warning">
          <h5 class="modal-title" id="updateUsersModalLabel">Update All Users</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>

        <div class="modal-body">
          <!-- 🔍 Filter Input -->
          <div class="mb-3">
            <input type="text" id="filterUpdateUsersInput" class="form-control" placeholder="Filter by Reg No" oninput="filterUpdateUsersTable()">
          </div>

          <!-- 👤 Users Table -->
          <div class="table-responsive">
            <table class="table table-bordered table-striped">
              <thead class="table-light">
                <tr>
                  <th>Reg No</th>
                  <th>Name</th>
                  <th>Department</th>
                  <th>Year</th>
                </tr>
              </thead>
              <tbody id="updateUsersTableBody">
                <!-- Filled dynamically -->
              </tbody>
            </table>
          </div>
        </div>

        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-warning">Submit Updates</button>
        </div>
      </div>
    </form>
  </div>
</div>

<script>
  let cachedUsers = []; // Used for filtering

  async function openUpdateUsersModal() {
    try {
      const res = await fetch('/admin/view-users');
      cachedUsers = await res.json(); // cache for filtering

      renderUpdateUsersTable(cachedUsers);

      const modal = new bootstrap.Modal(document.getElementById('updateUsersModal'));
      modal.show();
    } catch (err) {
      console.error('Error loading users:', err);
      alert('Failed to load users.');
    }
  }

  // 🔁 Render table rows dynamically based on user list
  function renderUpdateUsersTable(users) {
    const tbody = document.getElementById('updateUsersTableBody');
    tbody.innerHTML = '';

    users.forEach(user => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td><input type="hidden" name="ids[]" value="${user.id}">${user.reg_no}</td>
        <td>${user.name}</td>
        <td><input type="text" name="department_${user.id}" class="form-control" value="${user.department}"></td>
        <td><input type="text" name="year_${user.id}" class="form-control" value="${user.year}"></td>
      `;
      tbody.appendChild(row);
    });

    if (users.length === 0) {
      tbody.innerHTML = `<tr><td colspan="4" class="text-center">No users found.</td></tr>`;
    }
  }

  // 🔍 Filter users by reg_no (case-insensitive)
  function filterUpdateUsersTable() {
    const filter = document.getElementById('filterUpdateUsersInput').value.toLowerCase();

    const filteredUsers = cachedUsers.filter(user =>
      user.reg_no.toLowerCase().includes(filter)
    );

    renderUpdateUsersTable(filteredUsers);
  }

  async function submitUserUpdates(event) {
    event.preventDefault();

    const form = document.getElementById('updateAllUsersForm');
    const formData = new FormData(form);
    const ids = formData.getAll('ids[]');

    const updates = ids.map(id => ({
      id,
      department: formData.get(`department_${id}`),
      year: formData.get(`year_${id}`)
    }));

    try {
      const res = await fetch('/admin/update-users-bulk', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ updates })
      });

      const data = await res.json();
      if (!res.ok) throw new Error(data.message || 'Update failed.');

      alert(data.message);
      bootstrap.Modal.getInstance(document.getElementById('updateUsersModal')).hide();
      location.reload();
    } catch (err) {
      console.error('Update error:', err);
      alert('Failed to update users. See console.');
    }
  }
</script>

<!-- View Users Modal -->
<div class="modal fade" id="viewUsersModal" tabindex="-1" aria-labelledby="viewUsersModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header bg-info text-white">
        <h5 class="modal-title" id="viewUsersModalLabel">All Registered Users</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>

      <div class="modal-body">
        <!-- 🔍 Filter -->
        <input type="text" id="filterAllUsersInput" class="form-control mb-3" placeholder="Search by name, reg_no, department, role..." oninput="filterAllUsersTable()">

        <!-- 👥 Users Table -->
        <div class="table-responsive">
          <table class="table table-bordered table-hover">
            <thead class="table-light">
              <tr>
                <th>Photo</th>
                <th>Name</th>
                <th>Reg No</th>
                <th>Department</th>
                <th>Program</th>
                <th>College</th>
                <th>Year</th>
                <th>Role</th>
                <th>Gender</th>
                <th>Phone</th>
              </tr>
            </thead>
            <tbody id="allUsersTableBody">
              <!-- Filled dynamically -->
            </tbody>
          </table>
        </div>
      </div>

      <div class="modal-footer">
        <button class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

 <script>
  let allUsersCache = [];

  async function viewAllUsers() {
    try {
      const res = await fetch('/admin/view-users');
      const users = await res.json();
      allUsersCache = users;
      renderAllUsersTable(users);

      const modal = new bootstrap.Modal(document.getElementById('viewUsersModal'));
      modal.show();
    } catch (err) {
      console.error('Error fetching users:', err);
      alert('Failed to load users.');
    }
  }

  function renderAllUsersTable(users) {
    const tbody = document.getElementById('allUsersTableBody');
    tbody.innerHTML = '';

    if (users.length === 0) {
      tbody.innerHTML = `<tr><td colspan="10" class="text-center">No users found.</td></tr>`;
      return;
    }

    users.forEach(user => {
      const photoUrl = user.photo ? `/uploads/books/${user.photo}` : 'https://via.placeholder.com/40';

      const row = document.createElement('tr');
      row.innerHTML = `
        <td><img src="${photoUrl}" alt="Photo" width="40" height="40" class="rounded-circle"></td>
        <td>${user.name}</td>
        <td>${user.reg_no}</td>
        <td>${user.department}</td>
        <td>${user.program}</td>
        <td>${user.college}</td>
        <td>${user.year}</td>
        <td>${user.role}</td>
        <td>${user.gender}</td>
        <td>${user.phone_no}</td>
      `;
      tbody.appendChild(row);
    });
  }

  function filterAllUsersTable() {
    const query = document.getElementById('filterAllUsersInput').value.toLowerCase();
    const filtered = allUsersCache.filter(user =>
      user.name.toLowerCase().includes(query) ||
      user.reg_no.toLowerCase().includes(query) ||
      user.department.toLowerCase().includes(query) ||
      user.role.toLowerCase().includes(query)
    );
    renderAllUsersTable(filtered);
  }
</script>













<script>
  
  const users = [];

document.getElementById('addUserForm').addEventListener('submit', function (e) {
  console.log("Edit form submitted"); 
  e.preventDefault();
  
  const form = e.target;
  const formData = new FormData(form);

  formData.append('toJson', 'true');

  fetch('/admin/add-user', {
    method: 'POST',
    body: formData
  })
  .then(res => res.json())
  .then(data => {
    if (data.error) {
      alert('Error: ' + data.error);
    } else {
      alert('User added successfully');
      form.reset();
      bootstrap.Modal.getInstance(document.getElementById("addUserModal")).hide();

      // After adding user, fetch all users fresh from the server
      fetch('/admin/view-users')
        .then(res => res.json())
        .then(usersData => {
          if (Array.isArray(usersData)) {
            users.length = 0;  // clear current users array
            usersData.forEach(user => {
              // Fix photo path for each user
              user.photo = user.photo ? user.photo.replace(/^\/?uploads\/?/, '') : '';
            });
            users.push(...usersData);
            renderUsers();
          } else {
            alert('Failed to load updated users list');
          }
        })
        .catch(err => {
          console.error('Error fetching users:', err);
          alert('Error fetching updated users');
        });
    }
  })
  .catch(err => {
    console.error(err);
    alert('An error occurred');
  });
});


window.addEventListener('DOMContentLoaded', () => {
  fetch('/admin/view-users')
    .then(res => res.json())
    .then(data => {

      console.log('Fetched users:', data);
      if (Array.isArray(data)) {
        users.length = 0; // clear array if needed
        data.forEach(user => {
          // Prepend /uploads/ if photo exists
    user.photo = user.photo ? user.photo : 'https://via.placeholder.com/60';
        });
        users.push(...data);
        renderUsers();
      } else {
        console.error('Unexpected response:', data);
        alert('Failed to load users');
      }
    })
    .catch(err => {
      console.error('Fetch error:', err);
      alert('Error fetching users');
    });
});


  function renderUsers() {
  const tbody = document.getElementById("userTableBody");
  tbody.innerHTML = "";

  users.forEach((user, index) => {
const photoUrl = user.photo
  ? `/uploads/books/${user.photo}`
  : 'https://via.placeholder.com/60';



    const row = document.createElement("tr");
    row.innerHTML = `
      <td><img src="${photoUrl}" class="user-photo" /></td>
      <td>${user.name}</td>
      <td>${user.reg_no}</td>
      <td>${user.department}</td>
      <td>${user.program}</td>
      <td>${user.college}</td>
      <td>${user.year}</td>
      <td>${user.role}</td>
      <td>${user.gender}</td>
      <td>${user.phone_no}</td>
      <td class="d-grid gap-1">
  <button class="btn btn-sm btn-warning w-100" onclick="openEditModal(${index})">Edit</button>
  <button class="btn btn-sm btn-info text-white w-100" onclick="viewUser(${index})">View</button>
  <button class="btn btn-sm btn-danger w-100" onclick="deleteUser(${index})">Delete</button>
  ${!user.is_approved || user.is_approved === 'no'
    ? `<button class="btn btn-sm btn-success w-100" onclick="approveUser(${user.id})">Approve</button>`
    : `<span class="badge bg-success w-100">Approved</span>`
  }
</td>

    `;
    tbody.appendChild(row);
  });
}

function openEditModal(index) {
  const user = users[index];
  document.getElementById("editIndex").value = index;
  document.getElementById("editName").value = user.name;
  document.getElementById("editReg_no").value = user.reg_no;
  document.getElementById("editDepartment").value = user.department;
  document.getElementById("editProgram").value = user.program;
  document.getElementById("editCollege").value = user.college; 
  document.getElementById("editYear").value = user.year;
  document.getElementById("editRole").value = user.role;
  document.getElementById("editGender").value = user.gender;
  document.getElementById("editPhone_no").value = user.phone_no;
  document.getElementById("editPhoto").value = "";

  new bootstrap.Modal(document.getElementById("editUserModal")).show();
}

document.getElementById("editUserForm").addEventListener("submit", async function (e) {
  e.preventDefault();

  const form = e.target;
  const index = document.getElementById("editIndex").value;
  const user = users[index];
  if (!user) return alert("User not found.");

  const id = user.id;

  const formData = new FormData();
  formData.append("name", document.getElementById("editName").value);
  formData.append("reg_no", document.getElementById("editReg_no").value);
  formData.append("department", document.getElementById("editDepartment").value);
  formData.append("program", document.getElementById("editProgram").value);
  formData.append("college", document.getElementById("editCollege").value);
  formData.append("year", document.getElementById("editYear").value);
  formData.append("role", document.getElementById("editRole").value);
  formData.append("gender", document.getElementById("editGender").value);
  formData.append("phone_no", document.getElementById("editPhone_no").value);

  const photoInput = document.getElementById("editPhoto");
  if (photoInput.files.length > 0) {
    formData.append("photo", photoInput.files[0]);
  }

  try {
    const response = await fetch(`/admin/update-user/${id}`, {
      method: "PUT",
      body: formData
    });

    const data = await response.json();

    if (data.error) {
      alert('Error: ' + data.error);
    } else {
      alert('User updated successfully');
      form.reset();
      bootstrap.Modal.getInstance(document.getElementById("editUserModal")).hide();

      // Refresh user list from DB
      const res = await fetch('/admin/view-users');
      const usersData = await res.json();

      if (Array.isArray(usersData)) {
        users.length = 0;
        usersData.forEach(user => {
          user.photo = user.photo ? user.photo.replace(/^\/?uploads\/?/, '') : '';
        });
        users.push(...usersData);
        renderUsers();
      } else {
        alert('Failed to load updated users list');
      }
    }
  } catch (err) {
    console.error('Error during update:', err);
    alert('An error occurred while updating the user');
  }
});


 async function deleteUser(index) {
  const user = users[index];
  if (!user) return alert("User not found.");

  if (confirm("Are you sure you want to delete this user?")) {
    try {
      const response = await fetch(`/admin/delete-user/${user.id}`, {
        method: 'DELETE'
      });

      const data = await response.json();

      if (response.ok) {
        alert(data.message || 'User deleted successfully');
        users.splice(index, 1);  // Remove from frontend array
        renderUsers();           // Refresh UI
      } else {
        alert(data.error || 'Failed to delete user');
      }
    } catch (err) {
      console.error('Delete error:', err);
      alert('An error occurred while deleting the user.');
    }
  }
}


  function viewUser(index) {
    const user = users[index];
   const photoUrl = user.photo
  ? `/uploads/books/${user.photo}`
  : 'https://via.placeholder.com/60';

document.getElementById("viewPhoto").src = photoUrl;

    document.getElementById("viewName").textContent = user.name;
    document.getElementById("viewReg_no").textContent = `Reg No: ${user.reg_no}`;
    document.getElementById("viewDepartment").textContent = `Department: ${user.department}`;
    document.getElementById("viewProgram").textContent = `Program: ${user.program}`;
    document.getElementById("viewCollege").textContent = `College: ${user.collage}`;
    document.getElementById("viewYear").textContent = `Year: ${user.year}`;
    document.getElementById("viewGender").textContent = `Gender: ${user.gender}`;
    document.getElementById("viewPhone_no").textContent = `Phone: ${user.phone_no}`;
    document.getElementById("viewRole").textContent = user.role;
    new bootstrap.Modal(document.getElementById("viewUserModal")).show();
  }


async function approveUser(id) {
  if (!confirm("Are you sure you want to approve this user?")) return;

  try {
    const res = await fetch(`/admin/approve-user/${id}`, {
      method: 'PUT'
    });

    const data = await res.json();

    if (res.ok) {
      alert(data.message || "User approved successfully");
      // Refresh list
      location.reload();
    } else {
      alert(data.error || "Approval failed");
    }
  } catch (err) {
    console.error("Error approving user:", err);
    alert("Something went wrong while approving");
  }
}

// When clicking the Delete All Users button, open the modal and load users
document.getElementById('openDeleteUsersModalBtn').addEventListener('click', async () => {
  try {
    const res = await fetch('/admin/view-users'); // Or your endpoint that returns all users
    const users = await res.json();

    const tbody = document.getElementById('deleteUsersTableBody');
    tbody.innerHTML = ''; // Clear previous rows

    users.forEach(user => {
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td><input type="checkbox" class="deleteUserCheckbox" data-id="${user.id}"></td>
        <td>${user.name}</td>
        <td>${user.reg_no}</td>
        <td>${user.department}</td>
        <td>${user.year}</td>
      `;
      tbody.appendChild(tr);
    });

    // Show modal
    const deleteUsersModal = new bootstrap.Modal(document.getElementById('deleteUsersModal'));
    deleteUsersModal.show();
  } catch (err) {
    alert('Failed to load users for deletion.');
    console.error(err);
  }
});

// Select All checkbox functionality
document.getElementById('selectAllDelete').addEventListener('change', function() {
  const checked = this.checked;
  document.querySelectorAll('.deleteUserCheckbox').forEach(chk => {
    chk.checked = checked;
  });
});

// Confirm delete selected users
document.getElementById('openDeleteUsersModalBtn').addEventListener('click', async () => {
  try {
    const res = await fetch('/admin/view-users'); // Your endpoint that returns all users
    if (!res.ok) throw new Error('Failed to fetch users');
    const users = await res.json();

    const tbody = document.getElementById('deleteUsersTableBody');
    tbody.innerHTML = ''; // Clear previous rows

    users.forEach(user => {
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td><input type="checkbox" class="deleteUserCheckbox" data-id="${user.id}"></td>
        <td>${user.name}</td>
        <td>${user.reg_no}</td>
        <td>${user.department}</td>
        <td>${user.year}</td>
      `;
      tbody.appendChild(tr);
    });

    // Show modal
    const deleteUsersModal = new bootstrap.Modal(document.getElementById('deleteUsersModal'));
    deleteUsersModal.show();
  } catch (err) {
    alert('Failed to load users for deletion.');
    console.error(err);
  }
});

// Select All checkbox functionality
document.getElementById('selectAllDelete').addEventListener('change', function() {
  const checked = this.checked;
  document.querySelectorAll('.deleteUserCheckbox').forEach(chk => {
    chk.checked = checked;
  });
});

  renderUsers();
</script>





<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
