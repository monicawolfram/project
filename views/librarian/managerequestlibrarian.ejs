<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Manage Requests</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"/>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"/>
  <style>
    body {
      background: url('library-bg.jpg') no-repeat center center fixed;
      background-size: cover;
      font-family: Arial, sans-serif;
    }

    .sidebar {
      background-color: white;
      min-height: 100vh;
      padding: 20px;
      border-radius: 15px;
    }

    .sidebar .nav-link {
      color: black;
      font-size: 18px;
      padding: 10px 15px;
      display: flex;
      align-items: center;
      gap: 10px;
      text-decoration: none;
    }

    .sidebar .nav-link:hover {
      background-color: green;
      color: white;
      border-radius: 8px;
    }

    .sidebar .logo-container {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 20px;
    }

    .sidebar img {
      width: 50px;
      height: 50px;
      border-radius: 50%;
    }

    .top-bar {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 10px;
      background: white;
      border-radius: 10px;
      margin-bottom: 20px;
    }

    .main-content {
      flex-grow: 1;
      padding: 20px;
    }

    .tabs {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
    }

    .tab-button {
      padding: 8px 15px;
      border: none;
      background: hsl(0, 0%, 98%);
      color: #0e0c0c;
      border-radius: 5px;
      cursor: pointer;
    }

    .tab-button.active {
      background-color: green;
      color: white;
    }

    .table-container {
      background: white;
      padding: 10px;
      border-radius: 10px;
    }

    .form-control + .form-control {
      margin-top: 10px;
    }
  </style>
</head>
<body>

<div class="container-fluid">
  <div class="row">
    <!-- Sidebar -->
    <nav class="col-md-3 col-lg-2 d-md-block sidebar">
      <div class="logo-container">
        <img src="../images/sjcet.png" alt="SJCET Logo" />
        <h4>SJUCET Library</h4>
      </div>
      <ul class="nav flex-column">
        <li class="nav-item"><a class="nav-link" href="/librarian/librarian_home"><i class="fas fa-home"></i> Home</a></li>
        <li class="nav-item"><a class="nav-link" href="/librarian/librarian_category"><i class="fas fa-book"></i> Manage Catalog</a></li>
        <li class="nav-item"><a class="nav-link active" href="/librarian/manageinventorylibrarian"><i class="fas fa-tasks"></i> Manage Requests</a></li>
        <li class="nav-item"><a class="nav-link" href="/librarian/manageinventorylibrarian"><i class="fas fa-boxes"></i> Manage Inventory</a></li>
        <li class="nav-item"><a class="nav-link" href="/librarian/massageandfeedback"><i class="fas fa-comments"></i> Messages & Feedback</a></li>
        <li class="nav-item"><a class="nav-link" href="/librarian/generatereport"><i class="fas fa-chart-bar"></i> Generate Reports</a></li>
        <li class="nav-item"><a class="nav-link" href="/librarian/Itsupport"><i class="fas fa-tools"></i> IT Support</a></li>
        <li class="nav-item"><a class="nav-link" href="/librarian/manageusers"><i class="fas fa-users"></i> Manage Users</a></li>
        <li class="nav-item"><a class="nav-link" href="/librarian/managefines"><i class="fas fa-money-bill-wave"></i> Manage Fines</a></li>
      </ul>
    </nav>

    <!-- Main Content -->
    <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
      <div class="top-bar">
        <input type="text" class="form-control w-25" placeholder="Search here">
        <div class="d-flex align-items-center">
          <div class="dropdown me-3">
            <button class="btn btn-light dropdown-toggle" type="button" data-bs-toggle="dropdown">
              <i class="fas fa-bell"></i>
            </button>
            <ul class="dropdown-menu dropdown-menu-end">
              <li><a class="dropdown-item" href="#">New book added</a></li>
              <li><a class="dropdown-item" href="#">Request pending approval</a></li>
              <li><a class="dropdown-item" href="#">System maintenance</a></li>
              <li><hr class="dropdown-divider"></li>
              <li><a class="dropdown-item text-center" href="#">View all</a></li>
            </ul>
          </div>
          <div class="dropdown">
            <button class="btn btn-light dropdown-toggle" type="button" data-bs-toggle="dropdown">
              <i class="fas fa-user"></i>
            </button>
            <ul class="dropdown-menu dropdown-menu-end">
              <li><a class="dropdown-item" href="#">Librarian Account</a></li>
              <li><a class="dropdown-item" href="#">Admin Account</a></li>
              <li><hr class="dropdown-divider"></li>
              <li><a class="dropdown-item text-danger" href="#">Logout</a></li>
            </ul>
          </div>
        </div>
      </div>

      <div class="main-content">
        <h3>Librarian Manage Requests</h3>

        <!-- Add Request Form -->
        <div class="mb-3">
          <input type="text" id="requestUserId" placeholder="Reg No" class="form-control">
          <input type="text" id="requestName" placeholder="Name" class="form-control">
          <input type="text" id="requestResource" placeholder="Resource" class="form-control">
          <input type="text" id="requestTitle" placeholder="Title" class="form-control">
          <button class="btn btn-primary mt-2" onclick="addRequest()">➕ Add Request</button>
        </div>

        <!-- Filter by Reg No -->
       <div class="mb-3 d-flex gap-2 align-items-center">
        <input type="text" id="filterUserId" class="form-control w-25" placeholder="Filter by Reg No" oninput="loadRequests()">
        <button class="btn btn-outline-secondary" onclick="document.getElementById('filterUserId').value=''; document.getElementById('filterBarcode').value=''; loadRequests();">Clear</button>

        <button class="btn btn-success" onclick="startScan()">📷 Scan</button>
        <input type="text" id="filterBarcode" class="form-control w-25" placeholder="Scan Resource Code" style="display:none;" oninput="scanAndFetchResource()" />
      </div>

        <!-- Tabs -->
        <div class="tabs" id="requestTabs">
          <button class="tab-button active" data-status="all">📑 All Requests</button>
          <button class="tab-button" data-status="pending">🕒 Pending</button>
          <button class="tab-button" data-status="approved">✅ Approved</button>
        </div>

        <!-- Table -->
        <div class="table-container">
          <table class="table table-striped">
            <thead>
              <tr><th>Id</th><th>Reg No</th><th>Name</th><th>Resource</th><th>Date</th><th>Status</th><th>Action</th></tr>
            </thead>
            <tbody id="request-list"></tbody>
          </table>
        </div>
      </div>
    </main>
  </div>
</div>


<!-- Book Details Modal -->
<div class="modal fade" id="bookDetailsModal" tabindex="-1" aria-labelledby="bookDetailsLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header bg-success text-white">
        <h5 class="modal-title" id="bookDetailsLabel">Scanned Resource Details</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="bookDetailsBody">
        <!-- Content will be inserted by JS -->
      </div>
    </div>
  </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
  let currentStatus = 'all';
  let debounceTimer;

  document.addEventListener('DOMContentLoaded', () => {
    loadRequests();
    setupTabClickHandlers();
    setupFilterInput();
  });

  function setupTabClickHandlers() {
    const buttons = document.querySelectorAll('#requestTabs .tab-button');
    buttons.forEach(button => {
      button.addEventListener('click', () => {
        buttons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        currentStatus = button.dataset.status;
        loadRequests();
      });
    });
  }

  function setupFilterInput() {
    const filterInput = document.getElementById("filterUserId");
    if (filterInput) {
      filterInput.addEventListener('input', () => {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
          loadRequests();
        }, 500);
      });
    }
  }

  async function loadRequests() {
    try {
      showLoading(true);
      const regNoFilter = document.getElementById("filterUserId").value.trim();

      let url = '/librarian/requests/all';
      if (regNoFilter) {
        url += `?reg_no=${encodeURIComponent(regNoFilter)}`;
      }

      const res = await fetch(url);
      if (!res.ok) throw new Error('Network response not OK');

      const data = await res.json();

      const filtered = currentStatus === 'all'
        ? data
        : data.filter(r => r.status.toLowerCase() === currentStatus);

      displayRequests(filtered);

      // After displaying, automatically send reminders for approved requests
      autoSendReminders(filtered);

    } catch (err) {
      console.error('Failed to fetch requests:', err);
      alert('Failed to load requests. Please try again later.');
    } finally {
      showLoading(false);
    }
  }

  function displayRequests(data) {
    const tbody = document.getElementById("request-list");
    tbody.innerHTML = "";

    const thead = document.querySelector("thead tr");
    thead.innerHTML = currentStatus === 'pending'
      ? `<th>ID</th><th>Reg No</th><th>Name</th><th>Resource</th><th>Borrow Date</th><th>Return Date</th><th>Reason</th><th>Status</th><th>Action</th>`
      : `<th>ID</th><th>Reg No</th><th>Name</th><th>Resource</th><th>Borrow Date</th><th>Return Date</th><th>Status</th><th>Action</th>`;

    data.forEach(req => {
      const badgeColor = {
        pending: "warning",
        approved: "success",
        rejected: "danger"
      }[req.status.toLowerCase()] || "secondary";

      const reasonCell = currentStatus === 'pending' ? `<td>${req.reason || 'N/A'}</td>` : '';

      let actionButtons = `<span class="text-muted">No Action</span>`;

      if (req.status.toLowerCase() === "pending") {
        actionButtons = `
          <button class="btn btn-sm btn-success me-2" onclick="confirmUpdateStatus(${req.id}, 'Approved')">Approve</button>
        `;
      } else if (req.status.toLowerCase() === "approved") {
        const today = new Date();
        const returnDate = new Date(req.return_date);
        const daysLeft = Math.ceil((returnDate - today) / (1000 * 60 * 60 * 24));

        actionButtons = `
          <span class="text-success fw-bold">Approved</span><br/>
          <small>📅 ${daysLeft} day(s) left</small>
        `;
      } else if (req.status.toLowerCase() === "rejected") {
        actionButtons = `<span class="text-muted">Rejected</span>`;
      }

      const row = document.createElement("tr");
      row.innerHTML = `
        <td>${req.id}</td>
        <td>${req.borrower_id || 'N/A'}</td>
        <td>${req.borrower_name}</td>
        <td>${req.resource_type}</td>
        <td>${new Date(req.borrow_date).toLocaleDateString()}</td>
        <td>${new Date(req.return_date).toLocaleDateString()}</td>
        ${reasonCell}
        <td><span class="badge bg-${badgeColor}">${req.status}</span></td>
        <td>${actionButtons}</td>
      `;
      tbody.appendChild(row);
    });
  }

  // Automatically send reminders for approved requests 2 days before return
  async function autoSendReminders(requests) {
    const today = new Date();
    const reminderDays = 2; // send reminder 2 days before return

    for (const req of requests) {
      if (req.status.toLowerCase() !== "approved") continue;

      const returnDate = new Date(req.return_date);
      const daysLeft = Math.ceil((returnDate - today) / (1000 * 60 * 60 * 24));

      if (daysLeft === reminderDays) {
        try {
          const res = await fetch(`/librarian/requests/send-reminder/${req.id}`, { method: 'POST' });
          const data = await res.json();
          if (data.success) {
            console.log(`✅ Reminder sent automatically for request ID ${req.id}`);
          } else {
            console.warn(`❌ Failed to send reminder for request ID ${req.id}: ${data.message}`);
          }
        } catch (err) {
          console.error(`⚠️ Error sending reminder for request ID ${req.id}:`, err);
        }
      }
    }
  }

  // Confirmation before update
  function confirmUpdateStatus(id, status) {
    if (confirm(`Are you sure you want to ${status.toLowerCase()} this request?`)) {
      updateStatus(id, status);
    }
  }

  async function updateStatus(id, status) {
    try {
      const res = await fetch('/librarian/requests/update-status', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id, status })
      });

      const result = await res.json();
      if (result.success) {
        loadRequests();
      } else {
        alert("Failed to update status.");
      }
    } catch (err) {
      alert("Network error while updating status.");
    }
  }

  function showLoading(show) {
    if (show) {
      console.log("Loading...");
    } else {
      console.log("Done.");
    }
  }
</script>



<script>
  function startScan() {
    const barcodeInput = document.getElementById("filterBarcode");
    barcodeInput.style.display = "inline-block";
    barcodeInput.value = '';
    barcodeInput.focus();
  }

  async function scanAndFetchResource() {
    const resourceCode = document.getElementById("filterBarcode").value.trim();
    if (!resourceCode) return;

    try {
      if(resourceCode.length < 6) {
        return;
      }
      const res = await fetch(`/librarian/requests/resource-by-code/${encodeURIComponent(resourceCode)}`);
      const result = await res.json();

      if (result.success) {
        const { resource, requests } = result;

if (requests.length > 0) {

  console.log(resource);
  // Display scanned resource info in modal
 const modalBody = document.getElementById("bookDetailsBody");
modalBody.innerHTML = `
  <div class="row mb-3">
    <div class="col-md-4">
      <img src="/uploads/books/${resource.image}" alt="${resource.title}" class="img-fluid rounded border" />
    </div>
    <div class="col-md-8">
      <p><strong>Title:</strong> ${resource.title}</p>
      <p><strong>Author:</strong> ${resource.author}</p>
      <p><strong>Code:</strong> ${resource.book_code}</p>
      <p><strong>Type:</strong> ${resource.type}</p>
      <p><strong>Status:</strong> ${resource.status}</p>
    </div>
  </div>

  <div class="text-end">
    <button class="btn btn-success" onclick="approveRequest('${resource.book_code}')">
      <i class="fa fa-check-circle"></i> Approve
    </button>
  </div>
`;


  // Show modal
  const bookModal = new bootstrap.Modal(document.getElementById('bookDetailsModal'));
  bookModal.show();

  displayRequests(requests);
}
 else {
          alert("No borrow requests found for this resource.");
        }

      } else {
        alert(result.message || "No matching resource found.");
      }
    } catch (err) {
      console.error("Scan fetch error:", err);
      alert("Error fetching resource by code.");
    }finally {
    // Clear and re-focus for next scan
    // barcodeInput.value = '';
    // barcodeInput.focus();
  }
  }
  
</script>
<script>
  async function approveRequest(requestId) {
    if (!confirm(`Are you sure you want to approve request ID ${requestId}?`)) return;

    try {
      const res = await fetch(`/librarian/requests/approve/${requestId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      const data = await res.json();

      if (data.success) {
        alert('✅ Request approved successfully!');
        // Refresh only the part of the page or reload entirely
        location.reload();
      } else {
        alert('❌ Failed to approve request: ' + data.message);
      }
    } catch (err) {
      console.error('Error approving request:', err);
      alert('⚠️ An error occurred while approving the request.');
    }
  }
</script>



</body>
</html>
