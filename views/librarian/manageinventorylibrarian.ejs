<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Manage Inventory</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"/>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"/>
  <style>
    body {
      background: url('library-bg.jpg') no-repeat center center fixed;
      background-size: cover;
      font-family: Arial, sans-serif;
    }
    .sidebar {
      background-color: white;
      min-height: 100vh;
      padding: 20px;
      border-radius: 15px;
    }
    .sidebar .nav-link {
      color: black;
      font-size: 18px;
      padding: 10px 15px;
      display: flex;
      align-items: center;
      gap: 10px;
      text-decoration: none;
    }
    .sidebar .nav-link:hover {
      background-color: green;
      color: white;
      border-radius: 8px;
    }
    .sidebar .logo-container {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 20px;
    }
    .sidebar img {
      width: 50px;
      height: 50px;
      border-radius: 50%;
    }
    .top-bar {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 10px;
      background: white;
      border-radius: 10px;
      margin-bottom: 20px;
    }
    .main-content {
      flex-grow: 1;
      padding: 20px;
      background: white;
      border-radius: 10px;
      min-height: 80vh;
    }
    .filter-row {
      margin-bottom: 20px;
      gap: 10px;
      display: flex;
      flex-wrap: wrap;
      align-items: center;
    }
    .filter-row select,
    .filter-row input {
      max-width: 200px;
    }
    .table-container {
      overflow-x: auto;
    }
  </style>
</head>
<body>
<div class="container-fluid">
  <div class="row">
    <!-- Sidebar -->
    <nav class="col-md-3 col-lg-2 d-md-block sidebar">
      <div class="logo-container">
        <img src="/images/sjcet.png" alt="SJCET Logo" />
        <h4>SJUCET Library</h4>
      </div>
      <ul class="nav flex-column">
        <li class="nav-item"><a class="nav-link" href="/librarian/librarian_home"><i class="fas fa-home"></i> Home</a></li>
        <li class="nav-item"><a class="nav-link" href="/librarian/librarian_category"><i class="fas fa-book"></i> Manage Catalog</a></li>
        <li class="nav-item"><a class="nav-link" href="/librarian/managerequestlibrarian"><i class="fas fa-tasks"></i> Manage Requests</a></li>
        <li class="nav-item"><a class="nav-link active" href="#"><i class="fas fa-boxes"></i> Manage Inventory</a></li>
        <li class="nav-item"><a class="nav-link" href="/librarian/massageandfeedback"><i class="fas fa-comments"></i> Messages & Feedback</a></li>
        <li class="nav-item"><a class="nav-link" href="/librarian/generatereport"><i class="fas fa-chart-bar"></i> Generate Reports</a></li>
        <li class="nav-item"><a class="nav-link" href="/librarian/Itsupport"><i class="fas fa-tools"></i> IT Support</a></li>
        <li class="nav-item"><a class="nav-link" href="/librarian/manageusers"><i class="fas fa-users"></i> Manage Users</a></li>
        <li class="nav-item"><a class="nav-link" href="/librarian/managefines"><i class="fas fa-money-bill-wave"></i> Manage Fines</a></li>
      </ul>
    </nav>

    <!-- Main Content -->
    <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
      <div class="top-bar">
        <input type="text" id="searchInput" class="form-control w-25" placeholder="Search by title or name">
        <div class="d-flex align-items-center">
          <div class="dropdown me-3">
            <button class="btn btn-light dropdown-toggle" type="button" data-bs-toggle="dropdown">
              <i class="fas fa-bell"></i>
            </button>
            <ul class="dropdown-menu dropdown-menu-end">
              <li><a class="dropdown-item" href="#">New book added</a></li>
              <li><a class="dropdown-item" href="#">Request pending approval</a></li>
              <li><a class="dropdown-item" href="#">System maintenance</a></li>
              <li><hr class="dropdown-divider"></li>
              <li><a class="dropdown-item text-center" href="#">View all</a></li>
            </ul>
          </div>
          <div class="dropdown">
            <button class="btn btn-light dropdown-toggle" type="button" data-bs-toggle="dropdown">
              <i class="fas fa-user"></i>
            </button>
            <ul class="dropdown-menu dropdown-menu-end">
              <li><a class="dropdown-item" href="#">Librarian Account</a></li>
              <li><a class="dropdown-item" href="#">Admin Account</a></li>
              <li><hr class="dropdown-divider"></li>
              <li><a class="dropdown-item text-danger" href="#">Logout</a></li>
            </ul>
          </div>
        </div>
      </div>

      <div class="main-content">
        <h3>Manage Inventory</h3>

        <div class="filter-row">
          <select id="filterResource" class="form-select">
            <option value="">All Resources</option>
            <option value="Book">Book</option>
            <option value="Paper">Paper</option>
            <option value="Project">Project</option>
          </select>

          <select id="filterStatus" class="form-select">
            <option value="">All Statuses</option>
            <option value="Available">Available</option>
            <option value="Lost">Lost</option>
            <option value="Damaged">Damaged</option>
          </select>

          <button id="resetFilters" class="btn btn-secondary">Reset Filters</button>
        </div>

        <div class="mb-4">
          <h5>Add New Inventory Item</h5>
          <form id="addInventoryForm" class="row g-2">
            <div class="col-md-3">
              <input type="text" id="newName" class="form-control" placeholder="Name" required />
            </div>
            <div class="col-md-3">
              <select id="newResource" class="form-select" required>
                <option value="">Select Resource Type</option>
                <option value="Book">Book</option>
                <option value="Paper">Paper</option>
                <option value="Project">Project</option>
              </select>
            </div>
            <div class="col-md-3">
              <input type="text" id="newTitle" class="form-control" placeholder="Title" required />
            </div>
            <div class="col-md-3">
              <input type="date" id="newDate" class="form-control" required />
            </div>
            <div class="col-md-12 mt-2">
              <button type="submit" class="btn btn-primary">Add Item</button>
            </div>
          </form>
        </div>

        <div class="table-container">
          <table class="table table-striped" id="inventoryTable">
            <thead>
              <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Resource</th>
                <th>Title</th>
                <th>Date</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody id="inventory-list">
              <!-- Dynamic Content -->
            </tbody>
          </table>
        </div>
      </div>
    </main>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
  let inventoryData = [];

  async function fetchInventory() {
    try {
      const res = await fetch('http://localhost:3000/librarian/inventory');
      if (!res.ok) throw new Error('Failed to fetch inventory');
      inventoryData = await res.json();
      applyFiltersAndDisplay();
    } catch (error) {
      console.error(error);
    }
  }

  function applyFiltersAndDisplay() {
    const resourceFilter = document.getElementById('filterResource').value;
    const statusFilter = document.getElementById('filterStatus').value;
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();

    let filtered = inventoryData.filter(item => {
      const matchesResource = resourceFilter ? item.resource === resourceFilter : true;
      const matchesStatus = statusFilter ? item.status === statusFilter : true;
      const matchesSearch = item.name.toLowerCase().includes(searchTerm) || item.title.toLowerCase().includes(searchTerm);
      return matchesResource && matchesStatus && matchesSearch;
    });

    displayInventory(filtered);
  }

  function displayInventory(data) {
    const tbody = document.getElementById('inventory-list');
    tbody.innerHTML = '';
    data.forEach(item => {
      tbody.innerHTML += `
        <tr>
          <td>${item.id}</td>
          <td>${item.name}</td>
          <td>${item.resource}</td>
          <td>${item.title}</td>
          <td>${new Date(item.date).toLocaleDateString()}</td>
          <td>
            <select class="form-select" onchange="updateStatus(${item.id}, this.value)">
              <option value="Available" ${item.status === "Available" ? "selected" : ""}>Available</option>
              <option value="Lost" ${item.status === "Lost" ? "selected" : ""}>Lost</option>
              <option value="Damaged" ${item.status === "Damaged" ? "selected" : ""}>Damaged</option>
            </select>
          </td>
          <td>
            <button class="btn btn-danger btn-sm" onclick="deleteItem(${item.id})"><i class="fas fa-trash"></i></button>
          </td>
        </tr>
      `;
    });
  }

  async function updateStatus(id, status) {
    try {
      const res = await fetch(`http://localhost:3000/librarian/inventory/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status })
      });
      if (res.ok) {
        // Update local data for UI consistency
        const item = inventoryData.find(i => i.id === id);
        if (item) item.status = status;
        applyFiltersAndDisplay();
      } else {
        alert('Failed to update status');
      }
    } catch (error) {
      console.error(error);
    }
  }

  async function deleteItem(id) {
    if (!confirm('Are you sure you want to delete this item?')) return;
    try {
      const res = await fetch(`http://localhost:3000/librarian/inventory/${id}`, {
        method: 'DELETE'
      });
      if (res.ok) {
        inventoryData = inventoryData.filter(i => i.id !== id);
        applyFiltersAndDisplay();
      } else {
        alert('Failed to delete item');
      }
    } catch (error) {
      console.error(error);
    }
  }

  document.getElementById('filterResource').addEventListener('change', applyFiltersAndDisplay);
  document.getElementById('filterStatus').addEventListener('change', applyFiltersAndDisplay);
  document.getElementById('searchInput').addEventListener('input', applyFiltersAndDisplay);
  document.getElementById('resetFilters').addEventListener('click', () => {
    document.getElementById('filterResource').value = '';
    document.getElementById('filterStatus').value = '';
    document.getElementById('searchInput').value = '';
    applyFiltersAndDisplay();
  });

  document.getElementById('addInventoryForm').addEventListener('submit', async e => {
    e.preventDefault();
    const newName = document.getElementById('newName').value.trim();
    const newResource = document.getElementById('newResource').value;
    const newTitle = document.getElementById('newTitle').value.trim();
    const newDate = document.getElementById('newDate').value;

    if (!newName || !newResource || !newTitle || !newDate) {
      alert('Please fill in all fields');
      return;
    }

    try {
      const res = await fetch('http://localhost:3000/librarian/inventory', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: newName,
          resource: newResource,
          title: newTitle,
          date: newDate,
          status: 'Available' // default status
        })
      });

      if (res.ok) {
        // Reset form
        e.target.reset();
        // Reload data
        fetchInventory();
      } else {
        alert('Failed to add item');
      }
    } catch (error) {
      console.error(error);
    }
  });

  // Initial load
  fetchInventory();
</script>
</body>
</html>
